#######################
# IMPORTS & CONSTANTS #
#######################

import imp
import os
import sys
import re
import threading
import time

VIRTUAL_ENV = os.environ.get('VIRTUAL_ENV', None)
HOME = VIRTUAL_ENV or os.environ.get('WORKON_HOME', None) or os.environ['HOME']

#################################
# SAVE & RESTORE HISTORY STATES #
#################################

try:
    import readline
except ImportError:
    pass
else:

    ##################
    # TAB COMPLETION #
    ##################

    try:
        import rlcompleter
    except ImportError:
        pass
    else:
        if(sys.platform == 'darwin'):
            # Work around a bug in Mac OS X's readline module.
            readline.parse_and_bind("bind ^I rl_complete")
        else:
            readline.parse_and_bind("tab: complete")

    ######################
    # PERSISTENT HISTORY #
    ######################

    # Use separate history files for each virtual environment.
    HISTFILE = os.path.join(HOME, '.pyhistory')

    # Read the existing history if there is one.
    if os.path.exists(HISTFILE):
        try:
            readline.read_history_file(HISTFILE)
        except:
            # If there was a problem reading the history file then it may have
            # become corrupted, so we just delete it.
            os.remove(HISTFILE)

    # Set maximum number of commands written to the history file.
    readline.set_history_length(256)

    def savehist():
        try:
            readline.write_history_file(HISTFILE)
        except NameError:
            pass
        except Exception as err:
            print("Unable to save history file due to the following error: %s"
                  % err)

    # Register the ``savehist`` function to run when the user exits the shell.
    import atexit
    atexit.register(savehist)

print('Loaded .pythonrc')
